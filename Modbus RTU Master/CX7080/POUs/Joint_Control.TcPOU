<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Joint_Control" Id="{f003c753-2df9-4c5f-b746-2f71622d955b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Joint_Control
VAR
	HMI_Base_Angle_Setpoint : INT; 		// [deg] 	Final base angle setpoint from HMI
	HMI_Shoulder_Angle_Setpoint : INT; 	// [deg]	Final shoulder angle setpont from HMI
	HMI_Elbow_Angle_Setpoint : INT; 	// [deg]	Final elbow angle setpoint from HMI
	Base_Current_Angle : INT; 			// [deg]	Intermediate base angle. Calculated in this script with ramp function. Value written to Modbus slave
	Shoulder_Current_Angle : INT; 		// [deg]	Intermediate shoulder angle. Calculated in this script with ramp function. Value written to Modbus slave
	Elbow_Current_Angle : INT; 			// [deg]	Intermediate elbow angle. Calculated in this script with ramp function. Value written to Modbus slave
	HMI_Joint_Ramp_Speed : INT := 10; 	// [deg/s]	Used to set joint speed. Value from HMI
	Ramp_Base : FB_CTRL_RAMP_GENERATOR;
	Ramp_Shoulder : FB_CTRL_RAMP_GENERATOR;
	Ramp_Elbow : FB_CTRL_RAMP_GENERATOR;
	Ramp_Cycle_Time : TIME := T#1ms;
	Ramp_Base_Parameters : ST_CTRL_RAMP_GENERATOR_PARAMS;
	Ramp_Shoulder_Parameters : ST_CTRL_RAMP_GENERATOR_PARAMS;
	Ramp_Elbow_Parameters : ST_CTRL_RAMP_GENERATOR_PARAMS;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF HMI_Base_Angle_Setpoint > 180 THEN
	HMI_Base_Angle_Setpoint := 180;
ELSIF HMI_Base_Angle_Setpoint < 0 THEN
	HMI_Base_Angle_Setpoint := 0;
END_IF

IF HMI_Shoulder_Angle_Setpoint > 180 THEN
	HMI_Shoulder_Angle_Setpoint := 180;
ELSIF HMI_Shoulder_Angle_Setpoint < 0 THEN
	HMI_Shoulder_Angle_Setpoint := 0;
END_IF

IF HMI_Elbow_Angle_Setpoint > 180 THEN
	HMI_Elbow_Angle_Setpoint := 180;
ELSIF HMI_Elbow_Angle_Setpoint < 0 THEN
	HMI_Elbow_Angle_Setpoint := 0;
END_IF


Ramp_Base_Parameters.fVeloNeg := HMI_Joint_Ramp_Speed;
Ramp_Base_Parameters.fVeloPos := HMI_Joint_Ramp_Speed;
Ramp_Base_Parameters.tCtrlCycleTime := Ramp_Cycle_Time;
Ramp_Base_Parameters.tTaskCycleTime := Ramp_Cycle_Time;
Ramp_Base.bEnable := TRUE;
Ramp_Base(stParams := Ramp_Base_Parameters);


Ramp_Shoulder_Parameters.fVeloNeg := HMI_Joint_Ramp_Speed;
Ramp_Shoulder_Parameters.fVeloPos := HMI_Joint_Ramp_Speed;
Ramp_Shoulder_Parameters.tCtrlCycleTime := Ramp_Cycle_Time;
Ramp_Shoulder_Parameters.tTaskCycleTime := Ramp_Cycle_Time;
Ramp_Shoulder.bEnable := TRUE;
Ramp_Shoulder(stParams := Ramp_Shoulder_Parameters);


Ramp_Elbow_Parameters.fVeloNeg := HMI_Joint_Ramp_Speed;
Ramp_Elbow_Parameters.fVeloPos := HMI_Joint_Ramp_Speed;
Ramp_Elbow_Parameters.tCtrlCycleTime := Ramp_Cycle_Time;
Ramp_Elbow_Parameters.tTaskCycleTime := Ramp_Cycle_Time;
Ramp_Elbow.bEnable := TRUE;
Ramp_Elbow(stParams := Ramp_Elbow_Parameters);


Ramp_Base.fStart := HMI_Base_Angle_Setpoint;
Ramp_Shoulder.fStart := HMI_Shoulder_Angle_Setpoint;
Ramp_Elbow.fStart := HMI_Elbow_Angle_Setpoint;

Ramp_Base.fTarget := HMI_Base_Angle_Setpoint;
Ramp_Shoulder.fTarget := HMI_Shoulder_Angle_Setpoint;
Ramp_Elbow.fTarget := HMI_Elbow_Angle_Setpoint;

Base_Current_Angle := LREAL_TO_INT(Ramp_Base.fOut);
Shoulder_Current_Angle := LREAL_TO_INT(Ramp_Shoulder.fOut);
Elbow_Current_Angle := LREAL_TO_INT(Ramp_Elbow.fOut);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>